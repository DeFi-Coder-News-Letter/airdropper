// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class CreditsAdded extends EthereumEvent {
  get params(): CreditsAdded__Params {
    return new CreditsAdded__Params(this);
  }
}

export class CreditsAdded__Params {
  _event: CreditsAdded;

  constructor(event: CreditsAdded) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CreditsRemoved extends EthereumEvent {
  get params(): CreditsRemoved__Params {
    return new CreditsRemoved__Params(this);
  }
}

export class CreditsRemoved__Params {
  _event: CreditsRemoved;

  constructor(event: CreditsRemoved) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EtherMoved extends EthereumEvent {
  get params(): EtherMoved__Params {
    return new EtherMoved__Params(this);
  }
}

export class EtherMoved__Params {
  _event: EtherMoved;

  constructor(event: EtherMoved) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PricePerTxChanged extends EthereumEvent {
  get params(): PricePerTxChanged__Params {
    return new PricePerTxChanged__Params(this);
  }
}

export class PricePerTxChanged__Params {
  _event: PricePerTxChanged;

  constructor(event: PricePerTxChanged) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _oldPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensMoved extends EthereumEvent {
  get params(): TokensMoved__Params {
    return new TokensMoved__Params(this);
  }
}

export class TokensMoved__Params {
  _event: TokensMoved;

  constructor(event: TokensMoved) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _recipientCount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _totalTokensSent(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  accessWhitelist(): Address {
    let result = super.call("accessWhitelist", []);

    return result[0].toAddress();
  }

  try_accessWhitelist(): CallResult<Address> {
    let result = super.tryCall("accessWhitelist", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  credits(param0: Address): BigInt {
    let result = super.call("credits", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_credits(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("credits", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  pricePerTx(): BigInt {
    let result = super.call("pricePerTx", []);

    return result[0].toBigInt();
  }

  try_pricePerTx(): CallResult<BigInt> {
    let result = super.tryCall("pricePerTx", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  splitter(): Address {
    let result = super.call("splitter", []);

    return result[0].toAddress();
  }

  try_splitter(): CallResult<Address> {
    let result = super.tryCall("splitter", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  moveEther(_account: Address): boolean {
    let result = super.call("moveEther", [EthereumValue.fromAddress(_account)]);

    return result[0].toBoolean();
  }

  try_moveEther(_account: Address): CallResult<boolean> {
    let result = super.tryCall("moveEther", [
      EthereumValue.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  moveTokens(_token: Address, _account: Address): boolean {
    let result = super.call("moveTokens", [
      EthereumValue.fromAddress(_token),
      EthereumValue.fromAddress(_account)
    ]);

    return result[0].toBoolean();
  }

  try_moveTokens(_token: Address, _account: Address): CallResult<boolean> {
    let result = super.tryCall("moveTokens", [
      EthereumValue.fromAddress(_token),
      EthereumValue.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  addCredit(_to: Address, _amount: BigInt): boolean {
    let result = super.call("addCredit", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_addCredit(_to: Address, _amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("addCredit", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  reduceCredit(_to: Address, _amount: BigInt): boolean {
    let result = super.call("reduceCredit", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_reduceCredit(_to: Address, _amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("reduceCredit", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  setPricePerTx(_pricePerTx: BigInt): boolean {
    let result = super.call("setPricePerTx", [
      EthereumValue.fromUnsignedBigInt(_pricePerTx)
    ]);

    return result[0].toBoolean();
  }

  try_setPricePerTx(_pricePerTx: BigInt): CallResult<boolean> {
    let result = super.tryCall("setPricePerTx", [
      EthereumValue.fromUnsignedBigInt(_pricePerTx)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  creditsOfOwner(_owner: Address): BigInt {
    let result = super.call("creditsOfOwner", [
      EthereumValue.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_creditsOfOwner(_owner: Address): CallResult<BigInt> {
    let result = super.tryCall("creditsOfOwner", [
      EthereumValue.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _accessWhitelist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _splitter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class UpdateAccessWhitelistCall extends EthereumCall {
  get inputs(): UpdateAccessWhitelistCall__Inputs {
    return new UpdateAccessWhitelistCall__Inputs(this);
  }

  get outputs(): UpdateAccessWhitelistCall__Outputs {
    return new UpdateAccessWhitelistCall__Outputs(this);
  }
}

export class UpdateAccessWhitelistCall__Inputs {
  _call: UpdateAccessWhitelistCall;

  constructor(call: UpdateAccessWhitelistCall) {
    this._call = call;
  }

  get _accessWhitelist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAccessWhitelistCall__Outputs {
  _call: UpdateAccessWhitelistCall;

  constructor(call: UpdateAccessWhitelistCall) {
    this._call = call;
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MoveEtherCall extends EthereumCall {
  get inputs(): MoveEtherCall__Inputs {
    return new MoveEtherCall__Inputs(this);
  }

  get outputs(): MoveEtherCall__Outputs {
    return new MoveEtherCall__Outputs(this);
  }
}

export class MoveEtherCall__Inputs {
  _call: MoveEtherCall;

  constructor(call: MoveEtherCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MoveEtherCall__Outputs {
  _call: MoveEtherCall;

  constructor(call: MoveEtherCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MoveTokensCall extends EthereumCall {
  get inputs(): MoveTokensCall__Inputs {
    return new MoveTokensCall__Inputs(this);
  }

  get outputs(): MoveTokensCall__Outputs {
    return new MoveTokensCall__Outputs(this);
  }
}

export class MoveTokensCall__Inputs {
  _call: MoveTokensCall;

  constructor(call: MoveTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MoveTokensCall__Outputs {
  _call: MoveTokensCall;

  constructor(call: MoveTokensCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddCreditCall extends EthereumCall {
  get inputs(): AddCreditCall__Inputs {
    return new AddCreditCall__Inputs(this);
  }

  get outputs(): AddCreditCall__Outputs {
    return new AddCreditCall__Outputs(this);
  }
}

export class AddCreditCall__Inputs {
  _call: AddCreditCall;

  constructor(call: AddCreditCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCreditCall__Outputs {
  _call: AddCreditCall;

  constructor(call: AddCreditCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReduceCreditCall extends EthereumCall {
  get inputs(): ReduceCreditCall__Inputs {
    return new ReduceCreditCall__Inputs(this);
  }

  get outputs(): ReduceCreditCall__Outputs {
    return new ReduceCreditCall__Outputs(this);
  }
}

export class ReduceCreditCall__Inputs {
  _call: ReduceCreditCall;

  constructor(call: ReduceCreditCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReduceCreditCall__Outputs {
  _call: ReduceCreditCall;

  constructor(call: ReduceCreditCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetPricePerTxCall extends EthereumCall {
  get inputs(): SetPricePerTxCall__Inputs {
    return new SetPricePerTxCall__Inputs(this);
  }

  get outputs(): SetPricePerTxCall__Outputs {
    return new SetPricePerTxCall__Outputs(this);
  }
}

export class SetPricePerTxCall__Inputs {
  _call: SetPricePerTxCall;

  constructor(call: SetPricePerTxCall) {
    this._call = call;
  }

  get _pricePerTx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPricePerTxCall__Outputs {
  _call: SetPricePerTxCall;

  constructor(call: SetPricePerTxCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateCommissionSplitterCall extends EthereumCall {
  get inputs(): UpdateCommissionSplitterCall__Inputs {
    return new UpdateCommissionSplitterCall__Inputs(this);
  }

  get outputs(): UpdateCommissionSplitterCall__Outputs {
    return new UpdateCommissionSplitterCall__Outputs(this);
  }
}

export class UpdateCommissionSplitterCall__Inputs {
  _call: UpdateCommissionSplitterCall;

  constructor(call: UpdateCommissionSplitterCall) {
    this._call = call;
  }

  get _splitter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCommissionSplitterCall__Outputs {
  _call: UpdateCommissionSplitterCall;

  constructor(call: UpdateCommissionSplitterCall) {
    this._call = call;
  }
}
